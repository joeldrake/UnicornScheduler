{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.d4acb5056bb5f412b44d.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React from 'react';\r\nimport Layout from './../components/Layout.js';\r\nimport Event from './../components/Event.js';\r\nimport Slider from 'react-slick';\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport './../css/slider.css';\r\n\r\nclass Index extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var config = {\r\n      apiKey: 'AIzaSyDMVk4kh4_hTKYVXMWam50p3sYtrkbE-L0',\r\n      authDomain: 'unicornscheduler1.firebaseapp.com',\r\n      databaseURL: 'https://unicornscheduler1.firebaseio.com',\r\n      projectId: 'unicornscheduler1',\r\n      storageBucket: 'unicornscheduler1.appspot.com',\r\n      messagingSenderId: '447273647045',\r\n    };\r\n\r\n    try {\r\n      firebase.initializeApp(config);\r\n    } catch (err) {\r\n      /*\r\n        this try function is to skip the \"already exists\" message which\r\n        happens when we're hot-reloading and is not an actual error\r\n      */\r\n      if (!/already exists/.test(err.message)) {\r\n        console.error('Firebase initialization error', err.stack);\r\n      }\r\n    }\r\n\r\n    this.state = {\r\n      events: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    /*\r\n      //caused problems with the starting slide, removed it for now\r\n      this.updateWindowDimensions();\r\n      window.addEventListener('resize', this.updateWindowDimensions);\r\n    */\r\n    const firestore = firebase.firestore();\r\n\r\n    const settings = {\r\n      timestampsInSnapshots: true,\r\n    };\r\n    firestore.settings(settings);\r\n\r\n    firestore\r\n      .collection(`events`)\r\n      .onSnapshot(querySnapshot => {\r\n        const events = querySnapshot.docs.map(event => {\r\n          let eventData = event.data();\r\n          return eventData;\r\n        });\r\n        /*\r\n          dump to console only for dev purposes\r\n          remove when app is in production\r\n        */\r\n        console.log(JSON.stringify(events, null, 2));\r\n        this.setState({ events });\r\n      });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    //window.removeEventListener('resize', this.updateWindowDimensions);\r\n  }\r\n\r\n  updateWindowDimensions() {\r\n    this.setState({ width: window.innerWidth, height: window.innerHeight });\r\n  }\r\n\r\n  render() {\r\n    /*\r\n      Only autoplay if window is wider than 500px.\r\n      this did not work so good, removed it.\r\n\r\n      var autoPlay = this.state.width > 500 ? true : false;\r\n    */\r\n    var autoPlay = true;\r\n\r\n    let sliderSettings = {\r\n      dots: true,\r\n      infinite: true,\r\n      speed: 500,\r\n      slidesToShow: 1,\r\n      slidesToScroll: 1,\r\n      autoplay: autoPlay,\r\n      pauseOnHover: false,\r\n      arrows: true,\r\n      initialSlide: 0,\r\n      autoplaySpeed: 5000,\r\n    };\r\n\r\n    let renderEvents = [];\r\n    if (this.state.events) {\r\n      renderEvents = this.state.events.map((event, i) => {\r\n        return <Event key={i} event={event} slider={this.slider} firebase={firebase} />;\r\n      });\r\n    }\r\n\r\n    return (\r\n      <Layout>\r\n        <Slider ref={e => (this.slider = e)} {...sliderSettings}>\r\n          {renderEvents}\r\n        </Slider>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Index;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAxBA;AA2BA;AACA;;;AACA;AAAA;AACA;AAAA;;;;;AAKA;AAEA;AACA;AADA;AAGA;AAEA;AAGA;AACA;AACA;AACA;AACA;;;;;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;AAEA;AAEA;;;AAEA;AACA;AAAA;AAAA;AAAA;AACA;;;AAEA;AAAA;AACA;AAAA;;;;;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAaA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAKA;;;;AAvGA;AACA;AAyGA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}