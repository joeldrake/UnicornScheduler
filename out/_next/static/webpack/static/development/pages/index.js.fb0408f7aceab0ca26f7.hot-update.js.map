{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.fb0408f7aceab0ca26f7.hot-update.js","sources":["webpack:///./components/EventEdit.js"],"sourcesContent":["import React from 'react';\r\nimport { Formik } from 'formik';\r\nimport './../css/form-control.css';\r\nimport './../css/btn.css';\r\nimport './../css/eventEdit.css';\r\nimport moment from 'moment';\r\nimport 'react-dates/initialize';\r\nimport { SingleDatePicker } from 'react-dates';\r\nimport './../css/datepicker.css';\r\nimport uploadcare from 'uploadcare-widget';\r\nimport $ from 'jquery';\r\n\r\n// const firestore = firebase.firestore();\r\n\r\n// firestore\r\n//       .collection(`events`)\r\n//       .orderBy(`date`, `asc`)\r\n//       .onSnapshot(querySnapshot => {\r\n//         const events = querySnapshot.docs.map(event => {\r\n//           let eventData = event.data();\r\n//           return eventData;\r\n//         });\r\n\r\n// var database = firebase.database().ref;\r\n\r\n// var { database } = this.props.firebase;\r\n\r\n// firebase.database().ref('/events/').once('value').then(function(snapshot) {\r\n//   console.log(snapshot.val())\r\n// });\r\n\r\nclass Modal extends React.Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      date: '',\r\n      picture: '',\r\n    };\r\n  }\r\n\r\n  submitEventForm = (values, actions) => {\r\n    console.log(this.state.date);\r\n    console.log(values);\r\n    alert(JSON.stringify(values, null, 2));\r\n\r\n    const firestore = this.props.firebase.firestore();\r\n    const eventname = `${values.name} ${Date.now()}`;\r\n    values.date = this.state.date;\r\n    values.lastUpdated = new Date();\r\n    values.id = eventname;\r\n\r\n    firestore.collection(`events`).doc(eventname).set(values);\r\n\r\n    /////calles\r\n    // const firestore = this.props.firebase.firestore();\r\n\r\n    // const settings = {\r\n    //   timestampsInSnapshots: true,\r\n    // };\r\n    // firestore.settings(settings);\r\n\r\n    // firestore\r\n    //   .collection(`events`)\r\n    //   .orderBy(`date`, `asc`)\r\n    //   .onSnapshot(querySnapshot => {\r\n    //     const events = querySnapshot.docs.map(event => {\r\n    //       let eventData = event.data();\r\n    //       return eventData;\r\n    //     });\r\n\r\n    /////slut calles\r\n    //   console.log(JSON.stringify(events, null, 2));\r\n    // });\r\n\r\n    /*\r\n          dump to console only for dev purposes\r\n          remove when app is in production\r\n        */\r\n\r\n    /* \r\n    todo: Submit form data to firebase\r\n\r\n    CREATE EVENT (something like this)\r\n    const firestore = this.props.firebase.firestore();\r\n    const uniqeName = `${value.name} ${Date.now()}`;\r\n    \r\n    values.lastUpdated = new Date()\r\n    values.id = uniqeName\r\n\r\n    firestore.collection(`events`).doc(uniqeName).set(values);\r\n\r\n    UPDATE EVENT (something like this)\r\n    firestore\r\n      .collection(`events`)\r\n      .doc(uniqeName)\r\n      .update(values)\r\n      .then(() => {\r\n        console.log('Document successfully updated!');\r\n      })\r\n      .catch(error => {\r\n        console.error('Error updating document: ', error);\r\n      });\r\n\r\n    */\r\n\r\n    actions.setSubmitting(false);\r\n    actions.resetForm();\r\n  };\r\n\r\n  onChoosingImage = (e) => {\r\n    e.preventDefault();\r\n    uploadcare\r\n      .openDialog(null, {\r\n        imagesOnly: true,\r\n        crop: \"3:2\"\r\n      })\r\n      .done(file => {\r\n        file.promise().done(fileInfo => {\r\n          console.log('From inside promise ' + fileInfo.cdnUrl);\r\n          this.setState({\r\n            picture: fileInfo.cdnUrl,\r\n          });\r\n          console.log(this.state);\r\n        });\r\n      });\r\n  };\r\n\r\n  getPictureUrl = () => {\r\n    return (this.state.picture)\r\n  }\r\n\r\n  render() {\r\n\r\n    var picturebutton = () => {\r\n      if(this.state.picture) {\r\n        return <div><img id=\"picture_load\" src={this.state.picture}></img></div>\r\n      } else {\r\n        return <button id=\"picture_load_button\" className=\"ui button big wider_button\" onClick={this.onChoosingImage}>\r\n                Choose a picture\r\n              </button>\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className={`eventEdit`}>\r\n        <style global jsx>{`\r\n          body,\r\n          .event {\r\n            height: 100vh;\r\n            overflow: hidden;\r\n          }\r\n        `}</style>\r\n        <Formik initialValues={{}} onSubmit={this.submitEventForm}>\r\n          {({\r\n            values,\r\n            handleChange,\r\n            handleBlur,\r\n            handleSubmit,\r\n            isSubmitting,\r\n            \r\n          }) => (\r\n            <form onSubmit={handleSubmit} className={`eventEditForm`}>\r\n              <div>\r\n                <input\r\n                  required\r\n                  type={`text`}\r\n                  name={`headline`}\r\n                  value={values.headline || ''}\r\n                  placeholder={`Eventname`}\r\n                  className={`form-control`}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  autoComplete={`off`}\r\n                />\r\n                <textarea\r\n                  required\r\n                  name={`description`}\r\n                  value={values.description || ''}\r\n                  placeholder={`Desciption`}\r\n                  className={`form-control`}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  autoComplete={`off`}\r\n                />\r\n                <input\r\n                  required\r\n                  type={`text`}\r\n                  name={`location`}\r\n                  value={values.location || ''}\r\n                  placeholder={`Location`}\r\n                  className={`form-control`}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  autoComplete={`off`}\r\n                />\r\n\r\n\r\n                <input\r\n                  required\r\n                  type={`text`}\r\n                  name={`time`}\r\n                  value={values.time || ''}\r\n                  placeholder={`Time (four digits like 09:00)`}\r\n                  className={`form-control`}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  autoComplete={`off`}\r\n                />\r\n              </div>\r\n              <div>\r\n                <SingleDatePicker\r\n                  readOnly\r\n                  placeholder=\"Date\"\r\n                  date={values.date}\r\n                  onDateChange={date => (values.date = date)}\r\n                  focused={this.state.focused}\r\n                  onFocusChange={({ focused }) => this.setState({ focused })}\r\n                  name=\"date\"\r\n                  onBlur={handleBlur}\r\n                  displayFormat=\"DD MMM, YYYY\"\r\n                  numberOfMonths={1}\r\n                  required={true}\r\n                />\r\n                \r\n                <h4>color</h4>Color\r\n                <input\r\n                  required\r\n                  type={`color`}\r\n                  name={`color`}\r\n                  value={values.color}\r\n                  placeholder={`Color`}\r\n                  className={`form-control`}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  autoComplete={`off`}\r\n                />\r\n                \r\n                {picturebutton()}\r\n\r\n                <input\r\n                  id=\"hideIt\"\r\n                  type={`text`}\r\n                  name={`image`}\r\n                  value={values.image = this.getPictureUrl()}\r\n                  placeholder={`Image`}\r\n                  className={`form-control`}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  autoComplete={`off`}\r\n                />\r\n\r\n              </div>\r\n\r\n              <div className={`eventEditFormFooter`}>\r\n                <button\r\n                  type={`submit`}\r\n                  className={`btn eventEditFormSubmitBtn`}\r\n                  disabled={isSubmitting}\r\n                >\r\n                  Save\r\n                </button>\r\n              </div>\r\n            </form>\r\n          )}\r\n        </Formik>\r\n        <button\r\n          className={`closeEventEditBtn btn btnTransparent btnRound`}\r\n          onClick={this.props.toggleModal}\r\n        >\r\n          <img src={`/static/img/cross.svg`} />\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Modal;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAUA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;AA0BA;AACA;AACA;AACA;AA7EA;AA+EA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AA/FA;AAiGA;AACA;AACA;AAhGA;AACA;AACA;AAFA;AAHA;AAOA;AACA;;;AA4FA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AATA;AAAA;AAYA;AACA;AACA;AACA;AAEA;AACA;AACA;AARA;AAAA;AAWA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AATA;AAAA;AAcA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AATA;AAAA;AAYA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAXA;AAcA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AATA;AAAA;AAeA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AATA;AAAA;AAcA;AAAA;AAEA;AAEA;AAHA;AAAA;AArGA;AAkHA;AAFA;AAAA;AAIA;AAAA;AAAA;AAIA;;;;AAnPA;AACA;AAqPA;;;;A","sourceRoot":""}