{"version":3,"file":"static/webpack/static/development/pages/index.js.60897a3c388fd2494f18.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React from 'react';\nimport Layout from './../components/Layout.js';\nimport Event from './../components/Event.js';\nimport Slider from 'react-slick';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport './../css/slider.css';\n\nclass Index extends React.Component {\n  constructor(props) {\n    super(props);\n\n    var config = {\n      apiKey: 'AIzaSyDMVk4kh4_hTKYVXMWam50p3sYtrkbE-L0',\n      authDomain: 'unicornscheduler1.firebaseapp.com',\n      databaseURL: 'https://unicornscheduler1.firebaseio.com',\n      projectId: 'unicornscheduler1',\n      storageBucket: 'unicornscheduler1.appspot.com',\n      messagingSenderId: '447273647045',\n    };\n\n    try {\n      firebase.initializeApp(config);\n    } catch (err) {\n      /*\n        this try function is to skip the \"already exists\" message which\n        happens when we're hot-reloading and is not an actual error\n      */\n      if (!/already exists/.test(err.message)) {\n        console.error('Firebase initialization error', err.stack);\n      }\n    }\n\n    this.state = {\n      events: [],\n    };\n  }\n\n  componentDidMount() {\n    /*\n      //caused problems with the starting slide, removed it for now\n      this.updateWindowDimensions();\n      window.addEventListener('resize', this.updateWindowDimensions);\n    */\n    const firestore = firebase.firestore();\n\n    const settings = {\n      timestampsInSnapshots: true,\n    };\n    firestore.settings(settings);\n\n    firestore\n      .collection(`events`)\n      .orderBy(`date`, `asc`)\n      .onSnapshot(querySnapshot => {\n        const events = querySnapshot.docs.map(event => {\n          let eventData = event.data();\n          return eventData;\n        });\n        /*\n          dump to console only for dev purposes\n          remove when app is in production\n        */\n        console.log(JSON.stringify(events, null, 2));\n        this.setState({ events });\n      });\n  }\n\n  componentWillUnmount() {\n    //window.removeEventListener('resize', this.updateWindowDimensions);\n  }\n\n  updateWindowDimensions() {\n    this.setState({ width: window.innerWidth, height: window.innerHeight });\n  }\n\n  render() {\n    /*\n      Only autoplay if window is wider than 500px.\n      this did not work so good, removed it.\n\n      var autoPlay = this.state.width > 500 ? true : false;\n    */\n    var autoPlay = false;\n\n    let sliderSettings = {\n      dots: true,\n      infinite: true,\n      speed: 500,\n      slidesToShow: 1,\n      slidesToScroll: 1,\n      autoplay: autoPlay,\n      pauseOnHover: false,\n      arrows: true,\n      initialSlide: 0,\n      autoplaySpeed: 5000,\n    };\n\n    let renderEvents = [];\n    if (this.state.events) {\n      renderEvents = this.state.events.map((event, i) => {\n        return <Event key={i} event={event} slider={this.slider} />;\n      });\n    }\n\n    return (\n      <Layout>\n        <Slider ref={e => (this.slider = e)} {...sliderSettings}>\n          {renderEvents}\n        </Slider>\n      </Layout>\n    );\n  }\n}\n\nexport default Index;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAxBA;AA2BA;AACA;;;AACA;AAAA;AACA;AAAA;;;;;AAKA;AAEA;AACA;AADA;AAGA;AAEA;AAIA;AACA;AACA;AACA;AACA;;;;;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;AAEA;AAEA;;;AAEA;AACA;AAAA;AAAA;AAAA;AACA;;;AAEA;AAAA;AACA;AAAA;;;;;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAaA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAKA;;;;AAxGA;AACA;AA0GA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}